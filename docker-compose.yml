version: "2.2"
services:
  neo4j:
    image: neo4j
    ports:
      - "7687:7687"
      - "7474:7474"
    # volumes:
    #   - .:/var/lib/neo4j/import
  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017
  spark-master:
    image: bitnami/spark:3.4.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_NO_DAEMONIZE=yes
    ports:
      - "8080:8080"
      - "7077:7077"

  spark-worker-1:
    image: bitnami/spark:3.4.1
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_NO_DAEMONIZE=yes

  spark-worker-2:
    image: bitnami/spark:3.4.1
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_NO_DAEMONIZE=yes
  pyspark:
    image: jupyter/pyspark-notebook:spark-3.4.1
    ports:
      - "8888:8888"
    volumes:
      - ./jars:/jars
    environment:
      - SPARK_OPTS=--master=spark://spark-master:7077
      - PYSPARK_DRIVER_PYTHON_OPTS=notebook
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''" #Don't have to find the token in the logs
  zookeeper:
    image: debezium/zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  
  kafka:
    image: debezium/kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_EXT://localhost:29092,LISTENER_INT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_LISTENERS=LISTENER_INT://0.0.0.0:9092,LISTENER_EXT://0.0.0.0:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT

# neo4j/'password'
#docker exec -it cpts415-mongodb-1 mongosh -u "root" -p "password"
#use mongo
#db.createCollection('paths')

# kafka commands
# docker exec -it cpts415-kafka-1 /kafka/bin/kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test
# docker exec -it cpts415-kafka-1 /kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test
# docker exec -it cpts415-kafka-1 /kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic test